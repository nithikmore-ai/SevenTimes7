// This file is generated by Gemini.
'use server';
/**
 * @fileOverview AI-powered testimonial slider to showcase impactful quotes from clients.
 *
 * - generateTestimonialSlider - A function that determines whether to incorporate an AI-powered testimonial slider based on the existence of testimonials.
 * - GenerateTestimonialSliderInput - The input type for the generateTestimonialSlider function.
 * - GenerateTestimonialSliderOutput - The return type for the generateTestimonialSlider function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateTestimonialSliderInputSchema = z.object({
  testimonials: z.array(z.string()).describe('An array of testimonial quotes.'),
});
export type GenerateTestimonialSliderInput = z.infer<typeof GenerateTestimonialSliderInputSchema>;

const GenerateTestimonialSliderOutputSchema = z.object({
  includeSlider: z.boolean().describe('Whether or not to include the testimonial slider.'),
  reason: z.string().describe('The AI reasoning for including or excluding the testimonial slider.'),
});
export type GenerateTestimonialSliderOutput = z.infer<typeof GenerateTestimonialSliderOutputSchema>;

export async function generateTestimonialSlider(input: GenerateTestimonialSliderInput): Promise<GenerateTestimonialSliderOutput> {
  return generateTestimonialSliderFlow(input);
}

const prompt = ai.definePrompt({
  name: 'testimonialSliderPrompt',
  input: {schema: GenerateTestimonialSliderInputSchema},
  output: {schema: GenerateTestimonialSliderOutputSchema},
  prompt: `You are an expert web developer.

You will determine whether to include an AI-powered testimonial slider on a portfolio website based on the testimonials provided.

If there are no testimonials, you should not include the slider.
If there are testimonials, you should include the slider, and provide a reason why it would be beneficial to showcase the testimonials in a slider format.

Testimonials: {{#each testimonials}}{{{this}}}
{{/each}}`,
});

const generateTestimonialSliderFlow = ai.defineFlow(
  {
    name: 'generateTestimonialSliderFlow',
    inputSchema: GenerateTestimonialSliderInputSchema,
    outputSchema: GenerateTestimonialSliderOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
